---
title: "01 - Review an analysis"
date: last-modified

---
# Análisis - Revisando el análisis

```{r}
#| warning: false
#| output: false

library(analysistools)
library(dplyr)

my_data <- analysistools_MSNA_template_data
my_results <- analysistools::analysistools_MSNA_template_no_ratio_results_table
```

## `create_loa_from_results`

Si la loa utilizada fue compartida, se puede reutilizar. De lo contrario, con la tabla de resultados y la clave de análisis, la función `create_loa_from_results` generará una loa que se puede utilizar para crear el análisis para la revisión.

```{r}
my_loa_for_review <- my_results$results_table %>% 
  create_loa_from_results()

my_loa_for_review
```

::: {.callout-note .column-margin}
`create_loa_from_results` no adivinará los argumentos para `numerator_NA_to_0` y `filter_denominator_0`; estos se marcarán como TRUE por defecto.

El nivel de confianza también se pondrá como 0.95 por defecto.
:::

## `review_analysis`

::: {.callout-tip appearance="minimal"}
### review\_\*

![](../config/images/verb - review.png)

Las funciones **review\_**\* revisarán un objeto comparándolo con estándares u otro objeto y señalarán las diferencias. Por ejemplo, revisar la limpieza comparando el conjunto de datos sin procesar, el conjunto de datos limpio y el registro de limpieza; o revisar el análisis comparándolo con otro análisis.

:::

`review_analysis` comparará dos resultados y presentará las diferencias. No verificará cómo se creó el análisis ni buscará inconsistencias. Esto significa que, para revisar un análisis, es necesario crear uno y compararlos.

```{r}
#| output: false
my_design_for_review <- srvyr::as_survey_design(my_data)
analysis_for_review <- create_analysis(my_design_for_review, my_loa_for_review, sm_separator = "/")

binded_table <- my_results$results_table %>% 
  left_join(analysis_for_review$results_table, by = "analysis_key")
```

La tabla combinada, es decir, con ambas columnas de resultados, puede luego utilizarse para comparar los dos resultados.

```{r}
my_review <- review_analysis(binded_table)

typeof(my_review)
names(my_review)
```
`review_analysis` devuelve la tabla de resultados y una tabla de revisión. La tabla de revisión indicará si hay alguna diferencia.

```{r}
my_review$review_table %>%
  head()
```

Se puede resumir usando las funciones `group_by` y `tally`.

```{r}
my_review$review_table %>%
  group_by(stat, review_check, review_comment) %>%
  tally()
```

::: {.callout-note .column-margin}

La *analysis_key* es equivalente a un identificador único. Todas las claves de análisis deben ser únicas.
:::

La siguiente parte agrega algo de ruido para mostrar cómo aparecerían las diferencias.
```{r}
jittered_results_table <- binded_table
set.seed(123)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.x"] <- sample(unique(jittered_results_table$stat.x), 5, T)
set.seed(124)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.y"] <- sample(unique(jittered_results_table$stat.y), 5, T)
set.seed(125)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.x"] <- NA
set.seed(1236)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.y"] <- NA

```

```{r}
my_jittered_review <- review_analysis(jittered_results_table, 
                                      stat_columns_to_review = "stat.x",
                                      stat_columns_to_compare_with = "stat.y")
my_jittered_review$review_table %>%
  group_by(stat, review_check, review_comment) %>%
  tally()
```

La tabla de resultados tiene nuevas columnas, en particular *review_check_* y *review_comment_*. Estas pueden ayudar a filtrar las diferencias y explorarlas.

```{r}
my_jittered_review$results_table %>%
  filter(!review_check_stat.x) %>% 
  head(10)
```
