---
title: "01 - Simple analysis"
date: last-modified

---
# Analysis - Introduction

The framework is built around 4 steps: cleaning, composition, analysis, outputs

-   **Cleaning**: any manipulation to go from the raw data to the clean data
-   **Composition**: any manipulation before the analysis e.g. adding indicators, adding information from loop or main, aok aggregation, etc.
-   **Analysis**: any manipulation regarding only the analysis
-   **Outputs**: any manipulation to format the outputs.

The following section will present some introduction about the analysis.

![](../config/images/step - analysis.png)

The third step of the framework is the analysis. The analysis step aims to create a long table with one result per line and an **analysis key**. That table is not made for a human to read it but to store some information. Analysis stops at the results table: long format, stat + analysis key

The current analysis types are :

- mean
- median
- prop_select_one: proportion for select one
- prop_select_multiple: proportion for select multiple
- ratio

## create_analysis

Any **create_analysis_*** function will need a survey to be used, not a dataset. A survey object will be defined with the weights, strata and cluster information if they exists. 

::: {.callout-tip appearance="minimal"}
### create\_\*

![](../config/images/verb - create.png)

**create_**\* functions will create, transform something, e.g. creating a cleaning log with the checks to be filled, create analysis results table, create an output.

Outputs from **create_**\* functions outputs can be in different shape, format, etc. 

**create_**\* function is catch-all.
:::

```{r}
library(analysistools)
library(dplyr)
```


```{r}
my_data <- analysistools_MSNA_template_data
only_nas <- analysistools_MSNA_template_data %>%
  summarise(across(.cols = everything(), .fns = function(x) {
    sum(is.na(x)) == nrow(analysistools_MSNA_template_data)
  })) %>%
  do.call(c, .)

my_data_shorter <- analysistools_MSNA_template_data[, !only_nas] %>%
  select(!grep("other", names(analysistools_MSNA_template_data), value = T))
```

::: {.callout-note .column-margin}
At the moment, `create_analysis` breaks where a column only have missing values. They need to be removed beforehand.
:::

```{r}
#| output: false
my_design <- srvyr::as_survey_design(my_data_shorter, strata = "admin1")

my_analysis <- create_analysis(my_design, sm_separator = "/")
```

::: {.callout-note .column-margin}
`create_analysis` uses a survey design, not a dataset. Survey design object contains the information on the design of the survey, such as stratas, cluster, weights. It is built with **srvyr** package which is a wrapper around [**survey** package](http://r-survey.r-forge.r-project.org/survey/).

:::

`create_analysis` returns a list with:

- Results table: a long table with summary statistics per line
- Dataset: the dataset used with the survey design
- List of analysis: all the analysis that were performed 

```{r}
my_analysis %>%
  names()
```

```{r}
my_analysis$results_table %>%
  head()
```

```{r}
my_analysis$loa %>%
  head()
```

## Analysis key format

The analysis key format is currently :

- analysis type @/@ analysis variable %/% analysis variable value @/@ grouping variable %/% grouping variable value

- analysis type @/@ dependent variable %/% dependent variable value @/@ independent variable %/% independent variable value

If there are two or more grouping variables it would look like that

- analysis type @/@ analysis variable %/% analysis variable value @/@ grouping variable 1 %/% grouping variable value 1 -/-  grouping variable 2 %/% grouping variable value 2

Same would apply for analysis variable in case of a ratio.
