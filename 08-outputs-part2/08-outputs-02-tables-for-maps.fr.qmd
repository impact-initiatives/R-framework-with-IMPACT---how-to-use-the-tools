---
title: "02 - Tableaux pour les cartes"
date: last-modified
---

```{r setup, message=FALSE}
library(presentresults)
library(dplyr)
results_table <- expand.grid(analysis_var = c("msni_in_need", "comp_health_in_need", "comp_prot_in_need", "comp_edu_in_need", "comp_foodsec_in_need","comp_wash_in_need",        "comp_snfi_in_need"),
                             analysis_var_value = c(1,0),
                             group_var = "admin1",
                             group_var_value = c("PCODE1", "PCODE2"))

set.seed(12344)
results_table$stat <-runif(nrow(results_table))
```

Cette vignette montre un exemple de création d'un tableau pour l'outil MSNA Indicator Maps 1.2.

## `create_table_for_map`

Le tableau de résultats (généré aléatoirement) ci-dessous présente les résultats en format long pour 7 indicateurs et au niveau administratif 1 :

- **msni_in_need** : score de l'indice des besoins multisectoriels  
- **comp_health_in_need** : Score composite du secteur de la santé  
- **comp_prot_in_need** : score composite du secteur de la protection  
- **comp_edu_in_need** : Score composite du secteur de l'éducation  
- **comp_foodsec_in_need** : Score composite du secteur de la sécurité alimentaire  
- **comp_wash_in_need** : score composite du secteur de l'eau, de l'assainissement et de l'hygiène
- **comp_snfi_in_need** : score composite sectoriel pour les abris et les articles non alimentaires
- **admin1** : **PCODE1** et **PCODE2**.  

La colonne **stat** représente des pourcentages.

```{r}
head(results_table)
```

Les cartes ne peuvent afficher qu'une seule information par niveau d'administration. La première chose à faire est de filtrer le tableau des résultats pour obtenir les informations à cartographier. Dans l'exemple, la valeur de la variable d'analyse peut être 1 ou 0, où 1 signifie « dans le besoin » et 0 signifie « pas dans le besoin ». La carte montrera les pourcentages de ménages dans le besoin, les résultats seront filtrés pour 1. La fonction `create_table_for_map` peut ensuite être utilisée.

```{r}
results_table_filtered <- results_table |> 
  filter(analysis_var_value == "1")

results_table_recoded_5_classes <- results_table_filtered %>% 
  create_table_for_map(number_classes = 5)

results_table_recoded_5_classes
```

Si vous voulez utiliser 6 classes, mettez l'argument `nombre_classes` à 6.

```{r}
results_table_filtered %>% 
  create_table_for_map(number_classes = 6)
```


Il peut y avoir 5 ou 6 classes comme suit :

:::: {.columns}

::: {.column width="45%"}
### 5 classes

| Classe | Valeurs         |
|--------|-----------------|
| 1      | 0               |
| 2      | \<= 25%         |
| 3      | \<= 50%         |
| 4      | \<= 75%         |
| 5      | \<= 100%        |
| empty  | Anything else   |
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
### 6 classes

| Classe | Valeurs         |
|--------|-----------------|
| 1      | 0               |
| 2      | \<= 20%         |
| 3      | \<= 40%         |
| 4      | \<= 60%         |
| 5      | \<= 80%         |
| 6      | \<= 100%        |
| empty  | Anything else   |
:::

::::

## Problème possible

Si vous avez plus d'une valeur par indicateur et par niveau d'administration, vous devriez recevoir un avertissement de `tidyr`. Vous pouvez l'utiliser pour déterminer où se situe le problème.

```{r}
results_table %>% 
  create_table_for_map()
```
```{r}
results_table |>
  dplyr::summarise(n = dplyr::n(), .by = c(group_var_value, analysis_var)) |>
  dplyr::filter(n > 1L)
```

Dans ce cas, il y a 2 valeurs pour chaque combinaison de *group_var_value* et *analysis_var*.

```{r}
results_table |>
  filter(group_var_value == "PCODE1" & analysis_var == "msni_in_need")
```

Il y a deux valeurs, les cartes ne peuvent en afficher qu'une. Le tableau des résultats doit être filtré sur une seule valeur.

Cette section est issue de cette [vignette](https://impact-initiatives.github.io/presentresults/articles/create-table-for-map.html). 
