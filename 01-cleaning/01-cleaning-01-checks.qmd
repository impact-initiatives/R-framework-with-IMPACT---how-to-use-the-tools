---
title: "01 - Checks"
date: last-modified

---
# Cleaning - Checking a dataset

The following section will present some introduction about the cleaning.

![](../config/images/step - cleaning.png)

```{r}
#| warning: false
library(cleaningtools)
library(dplyr)

my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
```

::: {.callout-tip appearance="minimal"}
### check\_\*

![](../config/images/verb - check.png)

**check\_**\* functions will flag values based on a specific check. It will return them in a log. A \*check\_\*\* will return a list: the checked dataset, and the log.

**check\_**\* functions are used only in the cleaning step.
:::

## check_outliers

```{r}
#| output: false
my_log1 <- my_raw_dataset %>% 
  check_outliers(uuid_column = "X_uuid")
```

In this example, there are:

-   `checked_dataset`: the raw dataset (with extra variables if needed)
-   `potential_outliers`: a log of potential outliers

```{r}
typeof(my_log1)

my_log1 %>% 
  names()
```

The log has at least 4 columns:

-   `uuid`: the unique identifier
-   `issue`: the issue being flagged
-   `question`: the name of the question
-   `old_value`: the value being flagged

```{r}
my_log1$potential_outliers %>% 
  head()
```

::: {.callout-note .column-margin}
Outliers are defined as +/- 3 standard deviation from the mean.

For log outliers, log(x + 1) is used.
:::

## check_duplicate

```{r}
my_log2 <- my_raw_dataset %>% 
  check_duplicate(uuid_column = "X_uuid")

my_log2$duplicate_log %>% 
  head()
```

There is no duplicate. The log is empty.

## Pipe-able

::: {.callout-tip appearance="minimal"}
### Pipe-able

The framework is built around 2 adjectives, **pipe-able** and **independent**. In the framework, functions of the same family should be pipe-able. In the following case, 2 **check\_**\* functions are piped.
:::

```{r}
#| output: false
my_log3 <- my_raw_dataset %>% 
  check_outliers(uuid_column = "X_uuid") %>% 
  check_duplicate(uuid_column = "X_uuid")
```

```{r}
names(my_log3)
```

```{r}
my_log3$potential_outliers %>% 
  head()
```

```{r}
my_log3$duplicate_log %>% 
  head()
```

## More checks

This an example of more checks that exist.

```{r}
#| output: false

more_logs <- my_raw_dataset %>% 
  check_duplicate(uuid_column = "X_uuid") %>% 
  check_soft_duplicates(uuid_column = "X_uuid", kobo_survey = my_kobo_survey, sm_separator = ".") %>%
  check_outliers(uuid_column = "X_uuid") %>%
  check_value(uuid_column = "X_uuid") 
```
