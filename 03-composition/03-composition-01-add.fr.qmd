---
title: "01 - Ajouter des indicateurs"
date: last-modified

---


# Composition - Ajouter des indicateurs

Le cadre est construit autour de 4 étapes : nettoyage, composition, analyse, résultats.

-   **Nettoyage** : toute manipulation nécessaire pour passer des données brutes aux données propres.
-   **Composition** : toute manipulation préalable à l'analyse, par exemple l'ajout d'indicateurs, l'ajout d'informations provenant de la boucle ou des données principales, l'agrégation AOK, etc.
-   **Analyse** : toute manipulation liée à l'analyse uniquement.
-   **Résultats** : toute manipulation nécessaire à la mise en forme des résultats.

La section suivante présentera une introduction à la composition.


![](../config/images/step - composition.png)

```{r}
#| warning: false
library(impactR4PHU)
library(dplyr)

my_data <- impactR4PHU::impactR4PHU_data_template |>  
  filter(respondent_consent != "no") 
```

::: {.callout-tip appearance="minimal"}
### add\_\*

![](../config/images/verb - add.png)

les fonctions **add_**\* ajouteront une variable (colonne) au jeu de données. Par exemple, pour ajouter la durée d'une enquête, pour ajouter la catégorie de score de consommation alimentaire, etc.

La fonction **add_**\* prend un jeu de données en entrée et retourne le jeu de données + le nouvel indicateur (ainsi que toutes les étapes intermédiaires utilisées pour le calcul).

Par exemple, pour vérifier la durée d'une enquête, il n'y a que le début et la fin, mais pas la colonne de durée.

Avec `addindicators`, certaines colonnes intermédiaires peuvent être ajoutées si elles sont utilisées pour créer le nouvel indicateur.

:::

## add_fcs

```{r}
my_data_with_fcs <- my_data %>% add_fcs(
  cutoffs = "normal"
)

my_data_with_fcs[, tail(names(my_data_with_fcs), 10)] %>%
  head()
```
::: {.callout-note .column-margin}
Vous pouvez en apprendre plus sur les indicateurs de sécurité alimentaire [ici](https://fscluster.org/handbook/).
:::

## add_hhs

::: {.callout-tip appearance="minimal"}
### Pipe-able

Le framework est construit autour de deux adjectifs : **pipe-able** et **independent**. Dans le framework, les fonctions de la même famille sont en principe pipe-able. Dans le cas suivant, deux fonctions **add_**\* sont pipées.
:::


```{r}
my_data_with_indicators <- my_data %>%
  add_fcs(
  cutoffs = "normal"
) %>%
  add_hhs(
  )

my_data_with_indicators[, tail(names(my_data_with_indicators), 14)] %>%
  head()
```
